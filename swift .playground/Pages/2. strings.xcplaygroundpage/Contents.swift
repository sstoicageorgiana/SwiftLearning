import UIKit


// MARK: - 3.2 initializare string
print("\n 3.2 - initializare string")


var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax
// these two strings are both empty, and are equivalent to each other

if emptyString.isEmpty{
    print("is empty")
}else{
    print("not empty")
}


// MARK: - 3.3 Mutabilitatea stringurilor/ modificarea stringurilor

print("\n 3.3 - Mutabilitatea stringurilor/ modificarea stringurilor")
var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"
print(variableString)
print("Variable string este : \(variableString)")


/*
 
 let constantString = "Highlander"
 constantString += " and another Highlander"
 // this reports a compile-time error - a constant string cannot be modified
 
 */
print("constantele nu sunt mutabile")


//MARK: - 3.4 String-urile se transpun prin valoare - Copy-on-Write (COW) pentru optimizare
print("\n 3.4 - Caractere")
/*
 Stringurile 칥n Swift sunt transmise prin valoare, nu prin referin탵캒. Aceasta 칥nseamn캒 c캒 atunci c칙nd atribui un string unei noi variabile sau 칥l pasezi unei func탵ii, se creeaz캒 o copie a stringului, nu o referin탵캒 la acela탳i obiect.
 
 
 Stringurile 칥n Swift sunt transmise prin valoare, nu prin referin탵캒. Aceasta 칥nseamn캒 c캒 atunci c칙nd atribui un string unei noi variabile sau 칥l pasezi unei func탵ii, se creeaz캒 o copie a stringului, nu o referin탵캒 la acela탳i obiect.

 Cum func탵ioneaz캒 stringurile 칥n Swift:
 Swift folose탳te o tehnic캒 numit캒 Copy-on-Write (COW) pentru optimizare. Dac캒 dou캒 variabile par s캒 partajeze acela탳i string (dup캒 o atribuire), ele folosesc ini탵ial aceea탳i zon캒 de memorie pentru eficien탵캒. Totu탳i, 칥n momentul 칥n care una dintre variabile este modificat캒, Swift creeaz캒 o copie separat캒 a stringului pentru a men탵ine principiul transmiterii prin valoare.

 Cum s캒 explici corect:
 Stringurile 칥n Swift sunt tipuri de valoare 탳i sunt gestionate folosind un mecanism de Copy-on-Write.
 C칙nd un string este atribuit sau transmis unei func탵ii, o copie este f캒cut캒 doar dac캒 stringul este modificat ulterior.
  */

//Exemplu practic:


var original = "Hello"
var copy = original  // Copy-on-Write: partajeaz캒 momentan memoria

copy.append(", world!") // Acum `copy` prime탳te o copie separat캒
print(original) // "Hello" (nemodificat)
print(copy) // "Hello, world!"

/*
칉n acest exemplu, original 탳i copy partajeaz캒 ini탵ial aceea탳i memorie, dar c칙nd copy este modificat, Swift creeaz캒 o copie separat캒.
*/


//MARK: - 3.5 - Caractere

print("\n 3.5 - Caractere")


//se pot accesa valorile individuale pentru Stringa iter칙nd peste 탳irul cu o bucl캒 for- in:
for character in "Dog!游냤" {
    print(character)
}


//poti crea un caracter- de tip variabila sau constanta dand tip Character
let semnulExclamarii: Character = "!"
print(semnulExclamarii)


//stringurile pot fi crate si prin initializarea cu un array de caractere
let catCaracters : [Character] = ["C", "a", "t", "!", "游냠"]
print(catCaracters)
let catString = String(catCaracters)
print("catString: " + catString)

//MARK: - 3.6 - Concatenarea stringurilor si a caracterelor

print("\n 3.6 - Concatenarea stringurilor si a caracterelor")

//poate fi facute cu : (+):

let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2
// welcome now equals "hello there"


//poate fi facuta cu : (+=):
var instruction = "look over"
instruction += string2
// instruction now equals "look over there"

// poate fi fcauta prin metoda appeds
let ch: Character = "!"
welcome.append(ch)
print (" concatenare facuta cu metoda append : \(welcome)")


//NU AM INTELES CONCATENAREA PE LINII MULTIPLE??????????????????????????????????



//MARK: - 3.7 - Interpolarea 탳irurilor - String Interpolation

print("\n 3.7 - Interpolarea 탳irurilor - String Interpolation")

let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5"

//NU AM INTELES faza cu #??????????????????????????????????





//MARK: - 3.7.1 -  #

//1. C칙nd vrei s캒 scrii caractere speciale exact cum sunt
//F캒r캒 #, caracterele ca \n, \t, \" sunt interpretate (adic캒 executate ca newline, tab, ghilimele etc.).

let textFaraDiez = "Linie 1\nLinie 2"
print(textFaraDiez)
// Output:
// Linie 1
// Linie 2

let textCuDiez = #"Linie 1\nLinie 2"#
print(textCuDiez)
// Output: Linie 1\nLinie 2

//MARK: - 3.8 - Numararea caracterelor - Counting character

print("\n 3.8 - Numararea caracterelor - Counting character")

let unusualMenagerie = "Koala 游냗, Snail 游낿, Penguin 游냖, Dromedary 游냙"
print("unusualMenagerie has \(unusualMenagerie.count) characters")

/*
 Re탵ine탵i c캒 utilizarea de c캒tre Swift a clusterelor de grafeme extinse pentru Charactervalori 칥nseamn캒 c캒 concatenarea 탳i modificarea 탳irurilor pot s캒 nu afecteze 칥ntotdeauna num캒rul de caractere al unui 탳ir.

 De exemplu, dac캒 ini탵ializa탵i un 탳ir nou cu cuv칙ntul de patru caractere cafe탳i apoi ad캒uga탵i un COMBINING ACUTE ACCENT( U+0301) la sf칙r탳itul 탳irului, 탳irul rezultat va avea 칥n continuare un num캒r de caractere de 4, cu un al patrulea caracter de e패, nu e:

 */

var word = "cafe"
print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in cafe is 4"

word += "\u{301}"    // COMBINING ACUTE ACCENT, U+0301

print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in cafe패 is 4"


//MARK: - 3.9 - Accesarea si modificarea stringurilor - Accessing and Modifying a String

print("\n  3.9 - Accesarea si modificarea stringurilor - Accessing and Modifying a String")


let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
greeting[greeting.index(before: greeting.endIndex)]
// !
greeting[greeting.index(after: greeting.startIndex)]
// u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index]
// a


/*
 칉ncercarea de a accesa un index 칥n afara intervalului unui 탳ir sau Character la un index 칥n afara intervalului
 unui 탳ir va declan탳a o eroare de rulare.
 
 greeting[greeting.endIndex] // Error
 greeting.index(after: greeting.endIndex) // Error
 */


print(greeting)

//iterare prin indexi
for i in greeting.indices {
    let character = greeting[i]
    print("\(i): \(character)")
}

for index in greeting.indices {
    print("\(greeting[index]) ", terminator: "")
}
// Prints "G u t e n   T a g ! "


//Utiliza탵i proprietatea indices pentru a accesa to탵i indicii caracterelor individuale dintr-un 탳ir.

//MARK: - 3.9 - Inserarea si stergerea - Inserting and Removing

print("\n 3.9 - Inserarea si stergerea - Inserting and Removing")

/*
 Cum func탵ioneaz캒 offsetBy?
 offsetBy indic캒 c칙te pozi탵ii trebuie s캒 te deplasezi pornind de la un index existent.
 Po탵i s캒 te deplasezi 칥nainte (pozitiv) sau 칥napoi (negativ).

 */

var welcome1 = "hello"
welcome1.insert("!", at: welcome1.endIndex)
// welcome now equals "hello!" - insereaza la sfarsit

welcome1.insert(contentsOf: " there", at: welcome1.index(before : welcome1.endIndex))
//insereaza o colectie de caractere, la o anumita pozitie

welcome1.insert(contentsOf: "bau !", at: welcome1.startIndex)
welcome1.insert(contentsOf: "oh!", at: welcome1.endIndex)

var myString = "Hello Swift"
myString.insert(",", at: myString.index(myString.startIndex, offsetBy: 5))
print(myString) // Output: "Hello, Swift"

var myString2 = "Hello Swift"
myString2.insert(contentsOf: " beautiful", at: myString2.index(myString2.startIndex, offsetBy: 5))
print(myString2) // Output: "Hello beautiful Swift"

///
///
///
///
welcome1.remove(at: welcome1.index(before: welcome1.endIndex))
print(welcome1) //=> a sters ultimul caracter din string - pentru un singur caracter

welcome1 = "hello there"
welcome.remove(at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there"

var myString3 = "Hello, Swift!"
myString3.remove(at: myString3.index(myString3.startIndex, offsetBy: 5))
print(myString) // Output: "Hello Swift!"



let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex
welcome.removeSubrange(range)
// welcome now equals "hello"

//MARK: - 3.10 - Substrings

print("\n 3.10 - Substrings")

/*
 Substrings => O por탵iune dintr-un String care partajeaz캒 memoria cu 탳irul original, fiind eficient din punct de vedere al performan탵ei.
            => durat캒 de via탵캒 dependent캒 de 탳irul original. Pentru utilizare pe termen lung, converte탳te-l
            => Eficient pentru manipularea temporar캒 a 탳irurilor.
            => Dac캒 탳irul original este modificat sau eliminat, Substring-ul devine invalid.
 
 */

let greeting1 = "Hello, world!" // se defineste sirul
let index2 = greeting1.firstIndex(of: ",") ?? greeting1.endIndex
let beginning = greeting1[..<index2]
// beginning is "Hello"

// Convert the result to a String for long-term storage.
let newString = String(beginning)

/*
 greeting.firstIndex(of: ","): Caut캒 prima apari탵ie a caracterului "," 칥n 탳ir. Dac캒 칥l g캒se탳te, returneaz캒 pozi탵ia a                            celui caracter. Dac캒 nu 칥l g캒se탳te, returneaz캒 nil.
 ?? greeting.endIndex: Dac캒 "," nu este g캒sit, folose탳te pozi탵ia final캒 a 탳irului (endIndex) ca valoare implicit캒.
 
 [..<index]: Creeaz캒 un Substring care include toate caracterele de la 칥nceputul 탳irului p칙n캒 la pozi탵ia index, exclusiv.
 */



//MARK: - 3.11 - "??"


//Operatorul ?? 칥n Swift este numit Nil-Coalescing Operator. Este folosit pentru a oferi o valoare implicit캒
                        //atunci c칙nd o expresie op탵ional캒 (Optional) este nil.


//C칙nd valoarea op탵ional캒(optionalName) nu este nil:
let optionalName: String? = "John"
let name = optionalName ?? "Guest"
print(name) // Output: "John"    =>  Deoarece optionalName are valoarea "John", aceasta este returnat캒.

// C칙nd valoarea op탵ional캒(optionalName1) este nil:
let optionalName1: String? = nil
let name1 = optionalName1 ?? "Guest"
print(name1) // Output: "Guest"


//MARK: - 3.12 - Compararea stringurilor




///////////

var dict: [Int: String] = [:]

dict[1] = "Hello"

//print(dict[ 1])


//MARK: - 3.13 - INTERVIU

//1. Cum creezi un string 칥n Swift 탳i cum po탵i s캒-l concatenezi cu un alt string?


//2. Cum compari dou캒 stringuri 칥n Swift pentru a verifica dac캒 sunt egale? Po탵i s캒 explici 탳i cum func탵ioneaz캒 diferen탵ele dintre compararea sensibil캒 탳i insensibil캒 la majuscule?

//Raspuns : folosim operatorul " == " Acesta verific캒 dac캒 valorile stringurilor sunt identice, indiferent de loca탵ia lor 칥n memorie. Compararea este sensibil캒 la majuscule 칥n mod implicit.


let string11 = "Salut"
let string12 = "Salut"
print(string11 == string12) // Rezultatul este true


//Pentru compara탵ii insensibile la majuscule, putem utiliza metoda caseInsensitiveCompare. Aceasta returneaz캒 un rezultat de tip ComparisonResult, iar dac캒 stringurile sunt considerate egale, rezultatul va fi .orderedSame. Alternativ, putem transforma stringurile 칥n litere mici sau majuscule folosind metodele lowercased() sau uppercased() 탳i apoi le compar캒m cu ==.


let string14 = "Salut"
let string15 = "salut"

// Comparare insensibil캒 la majuscule folosind lowercased()
if string14.lowercased() == string15.lowercased() {
    print("Stringurile sunt egale (insensibil la majuscule).")
}

// Sau folosind caseInsensitiveCompare
if string1.caseInsensitiveCompare(string2) == .orderedSame {
    print("Stringurile sunt egale (insensibil la majuscule).")
}

//Este important de men탵ionat c캒 operatorul === este folosit doar pentru compararea referin탵elor la obiecte 탳i nu poate fi aplicat stringurilor, deoarece acestea sunt tipuri de valoare (value types) 칥n Swift."



//exercitiu
//Compar캒 dou캒 stringuri folosind == 탳i afi탳eaz캒 dac캒 sunt egale sau nu.

let mancare = "cartofi"
let legume = "cartofi"

//comparare sensibila
if mancare == legume {
    print("Sunt egale")
} else {
    print("String-urile nu au valori egale")
}

//comparare insensibila - prin lowercase

if mancare.lowercased() == legume.lowercased(){
    print("Sunt egale")
} else {
    print("String-urile nu au valori egale")

}

//comparare insensibila - prin caseInsensitiveCompare(_:)

if mancare.caseInsensitiveCompare(legume) == .orderedSame {
    print("Sunt egale")
} else {
    print("String-urile nu au valori egale")
}

// 3. Cum func탵ioneaz캒 interpolarea stringurilor 칥n Swift?

//Raspuns : "Interpolarea stringurilor 칥n Swift este o metod캒 de a insera valori dinamice (din variabile, constante sau expresii) 칥ntr-un 탳ablon de text. Folose탳te sintaxa \(expresie) pentru a evalua 탳i 칥nlocui expresia 칥n interiorul unui string. Aceast캒 abordare face codul mai clar 탳i mai u탳or de citit comparativ cu concatenarea tradi탵ional캒.

let nume = "Stefania"
let varsta = 25
let mesaj = "Numele meu este \(nume) 탳i am \(varsta) de ani."
print(mesaj)
// Output: Numele meu este Stefania 탳i am 25 de ani.

let a = 5
let b = 3
print("Suma lui \(a) 탳i \(b) este \(a + b).")
// Output: Suma lui 5 탳i 3 este 8.

//Interpolarea suport캒 orice tip care adopt캒 protocolul CustomStringConvertible, ceea ce 칥nseamn캒 c캒 putem folosi aproape orice tip 칥n stringuri, at칙ta timp c칙t acesta poate fi convertit 칥n text.

//Este important de men탵ionat c캒 interpolarea face codul mai lizibil 탳i este preferat캒 칥n locul concaten캒rii cu operatorul +, mai ales 칥n cazul textelor mai complexe."


//4. Ce este un optional 칥n Swift? Cum 칥l declari 탳i cum 칥l desfaci pentru a accesa valoarea?

//R캒spuns: Un optional 칥n Swift este un tip special care poate con탵ine fie o valoare, fie nil. Este folosit pentru a gestiona situa탵iile 칥n care o variabil캒 sau o constant캒 poate s캒 nu aib캒 o valoare. Optionalurile sunt declarate ad캒ug칙nd un semn de 칥ntrebare (?) dup캒 tipul variabilei.

var numeOptional: String? = nil

//Pentru a accesa valoarea unui optional, trebuie s캒 칥l desf캒탳ur캒m (unwrap). Putem face acest lucru 칥n mai multe moduri:



// 칉n Swift, putem verifica dac캒 un string con탵ine un anumit sub-string folosind metoda contains(_:). Aceasta returneaz캒 un Bool (true sau false) 칥n func탵ie de prezen탵a sub-stringului specificat 칥n stringul principal.

var fraza = "Stefania este o persoan캒"

if fraza.contains("Stefania") {
    print("Fraza con탵ine sub-stringul 'Stefania'.")
} else {
    print("Fraza nu con탵ine sub-stringul 'Stefania'.")
}

//Dac캒 dorim s캒 facem o verificare insensibil캒 la majuscule, putem transforma stringurile 칥n litere mici 칥nainte de verificare:

if let range = fraza.range(of: "Stefania") {
    print("Sub-stringul 'Stefania' se afl캒 칥n range-ul: \(range).")
}

//5.Cum po탵i ob탵ine lungimea unui string 칥n Swift?
//칉n Swift, putem ob탵ine lungimea unui string folosind proprietatea count. Aceasta returneaz캒 num캒rul total de caractere din string, inclusiv spa탵ii sau caractere speciale.
let numeStef = "stefania"

//numeStef.uppercased()
//numeStef.lowercased()


print(#"Line 1\nLine 2"# )
print("Line 1\nLine 2")
 
let softWrappedQuotation = """
The White Rabbit put on his spectacles.  "Where shall I begin, \
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on \
till you come to the end; then stop."
"""

print(softWrappedQuotation)

